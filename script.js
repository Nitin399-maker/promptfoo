import { openaiConfig } from "https://cdn.jsdelivr.net/npm/bootstrap-llm-provider@1.2";
import { WebContainer } from "https://cdn.jsdelivr.net/npm/@webcontainer/api@1.5.3/+esm";
import { SYSTEM_PROMPT } from './utils.js';
let aiProviderConfig = null;
let configContent = null;
let webcontainerInstance;
let isContainerInitialized = false;
let isEditMode = false;
let originalYaml = '';
let selectedModel = null;
const $ = id => document.getElementById(id);
const $$ = sel => document.querySelectorAll(sel);
$('configureAiProvider').onclick = handleAiProvider;
$('generateYaml').onclick = generateYamlWithAI;
$('configFile').addEventListener('change', handleFileUpload);
$('runEval').addEventListener('click', runEvaluation);
$('clearOutput').addEventListener('click', clearOutput);
$('resetContainer').addEventListener('click', resetContainer);
$('toggleEditMode').addEventListener('click', toggleEditMode);
$('saveYaml').addEventListener('click', saveYamlChanges);

document.querySelectorAll('input[name="mode"]').forEach(radio => {
    radio.addEventListener('change', function() {
        $('uploadSection').style.display = 'none';
        $('aiSection').style.display = 'none';
        if (this.value === 'upload') { $('uploadSection').style.display = 'block'; }
         else if (this.value === 'ai') { $('aiSection').style.display = 'block'; }
    });
});

async function handleAiProvider() {
    try {
        const config = await openaiConfig({
            defaultBaseUrls: ["https://api.openai.com/v1", "https://openrouter.ai/api/v1", "http://localhost:11434/v1"],
            show: true
        });
        if (!config?.models?.length) throw new Error('No models found');
        aiProviderConfig = config;
        const modelSelect = $('aiModelSelect');
        modelSelect.innerHTML = '<option value="">Choose a model...</option>';
        config.models.forEach(model => {
            const option = document.createElement('option');
            option.value = model;
            option.textContent = model;
            modelSelect.appendChild(option);
        });
        if (config.models.length > 0) { modelSelect.value = config.models[0]; }
        $('aiProviderStatus').innerHTML = `<div class="alert alert-success">AI Provider configured: ${config.baseUrl} (${config.models.length} models available)</div>`;
        $('aiGenerationSection').style.display = 'block';
        log(`‚úÖ AI Provider configured: ${config.baseUrl}`);
    } catch (error) {
        $('aiProviderStatus').innerHTML = `<div class="alert alert-danger">Failed to configure AI provider: ${error.message}</div>`;
        log(`‚ùå AI Provider configuration failed: ${error.message}`);
    }
}

async function generateYamlWithAI() {
    const userPrompt = $('aiPrompt').value.trim();
    const selectedModel = $('aiModelSelect').value; 
    try {
        $('generateYaml').disabled = true;
        $('generateYaml').textContent = 'Generating...';
        log(`ü§ñ Generating YAML with ${selectedModel}...`);
        const systemPrompt = SYSTEM_PROMPT ;
        const response = await callAI(systemPrompt, userPrompt, selectedModel);
        if (response && response.trim()) {
            configContent = response.trim();
            originalYaml = configContent;
            $('yamlOutput').textContent = configContent;
            $('yamlEditor').value = configContent;
            $('yamlSource').innerHTML = `Generated by AI using <strong>${selectedModel}</strong>)`;
            $('yamlCard').style.display = 'block';
            $('executionSection').style.display = 'block';
            $('runEval').disabled = false;
            log(`‚úÖ YAML generated successfully by ${selectedModel}`);
        } else { throw new Error('AI returned empty response'); }
    } catch (error) {
        log(`‚ùå AI generation failed: ${error.message}`);
        $('aiProviderStatus').innerHTML = `<div class="alert alert-danger">AI generation failed: ${error.message}</div>`;
    } finally {
        $('generateYaml').disabled = false;
        $('generateYaml').textContent = 'Generate YAML with AI';
    }
}

async function callAI(systemPrompt, userPrompt, model) {
    const config = aiProviderConfig;
    const requestBody = {
        model: model,
        messages: [{ role: "system", content: systemPrompt }, { role: "user", content: userPrompt }]
    };
    const response = await fetch(`${config.baseUrl}/chat/completions`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${config.apiKey}`
        },
        body: JSON.stringify(requestBody)
    });
    if (!response.ok){throw new Error(`API failed: ${response.status} ${response.statusText}`);}
    const data = await response.json();
    return data.choices?.[0]?.message?.content;
}

function toggleEditMode() {
    if (isEditMode) { exitEditMode();}
    else { enterEditMode(); }
}

function enterEditMode() {
    isEditMode = true;
    originalYaml = configContent;
    $('yamlDisplay').style.display = 'none'; $('yamlEditSection').style.display = 'block';
    $('toggleEditMode').style.display = 'none'; $('saveYaml').style.display = 'inline-block';
    $('yamlEditor').value = configContent; $('yamlEditor').focus();
}

function exitEditMode() {
    isEditMode = false;
    $('yamlDisplay').style.display = 'block'; $('yamlEditSection').style.display = 'none';
    $('toggleEditMode').style.display = 'inline-block'; $('saveYaml').style.display = 'none';
}

function saveYamlChanges() {
    const editedYaml = $('yamlEditor').value;
    try {
        if (!editedYaml.trim()) {  throw new Error('YAML content cannot be empty'); }
        if (!editedYaml.includes('prompts:') || !editedYaml.includes('providers:') || !editedYaml.includes('tests:')) {throw new Error('YAML must have prompts, providers, and all sections');}
        configContent = editedYaml;
        $('yamlOutput').textContent = configContent;
        const currentSource = $('yamlSource').innerHTML;
        if (!currentSource.includes('(edited)')) {
            $('yamlSource').innerHTML = currentSource + ' <em>(edited)</em>';
        }
        exitEditMode();
        log('‚úÖ YAML changes saved successfully');
    } catch (error) {
        log(`‚ùå YAML validation failed: ${error.message}`);
    }
}
  
async function handleFileUpload(event) {
    const file = event.target.files[0];
    if (file) {
        configContent = await file.text();
        originalYaml = configContent;
        $('yamlOutput').textContent = configContent;
        $('yamlEditor').value = configContent;
        $('yamlSource').textContent = `Uploaded from file: ${file.name}`;
        $('yamlCard').style.display = 'block';
        $('executionSection').style.display = 'block';
        $('runEval').disabled = false;
        log(`‚úÖ Config file loaded: ${file.name}`);
    }
}

function log(message) {
    const timestamp = new Date().toLocaleTimeString();
    $('logs').innerHTML += `[${timestamp}] ${message}\n`;
    $('logs').scrollTop = $('logs').scrollHeight;
}

function enableDownloadButton(jsonContent, fileName = 'results.json') {
    $('downloadResults').disabled = false;
    $('downloadResults').onclick = () => {
        const blob = new Blob([jsonContent], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = fileName;
        a.click();
        URL.revokeObjectURL(url);
    };
}

async function readProcessOutput(process, logPrefix = '') {
    let capturedOutput = '';
    if (!process.output) { return capturedOutput; }
    const reader = process.output.getReader();
    const readOutput = async () => {
        try {
            while (true) {
                const { done, value } = await reader.read();
                if (done) break;
                let text = '';
                try {
                    if (typeof value === 'string') {
                        text = value;
                    } else if (value instanceof Uint8Array) {
                        text = new TextDecoder('utf-8', { fatal: false }).decode(value);
                    } else if (value && typeof value.toString === 'function') {
                        text = value.toString();
                    }
                    if (text) {
                        capturedOutput += text;
                        const lines = text.split('\n').filter(line => line.trim());
                        lines.forEach(line => {
                            if (line.trim() && logPrefix) {
                                log(`${logPrefix}: ${line.trim()}`);
                            }
                        });
                    }
                } catch (decodeError) {
                    log(`‚ö†Ô∏è Decode warning: ${decodeError.message}`);
                    if (value && value.length) {
                        try {
                            text = String.fromCharCode.apply(null, Array.from(value).filter(code => code < 128 && code > 31));
                            if (text.trim()) {
                                capturedOutput += text;
                                if (logPrefix) log(`${logPrefix}: ${text.trim()}`);
                            }
                        } catch (e) {
                        }
                    }
                }
            }
        } catch (e) {
            if (e.name !== 'AbortError') {log(`‚ö†Ô∏è Stream read error: ${e.message}`);}
        }
    };
    try {
        await Promise.race([ readOutput(),
            process.exit.then(() => { return new Promise(resolve => setTimeout(resolve, 1000)); })
        ]);
    } catch (e) { log(`‚ö†Ô∏è Output reading error: ${e.message}`);
    } finally { try { reader.releaseLock(); } catch (e) {}  }
    return capturedOutput;
}

async function initWebContainer() {
    if (isContainerInitialized && webcontainerInstance) { return webcontainerInstance; }
    const wc = await WebContainer.boot();
    log('‚úÖ WebContainer booted');
    const envConfig = `PROMPTFOO_DISABLE_TELEMETRY=1
                        DO_NOT_TRACK=1
                        CI=true
                        PROMPTFOO_DISABLE_UPDATE=1`;
    await wc.fs.writeFile('.env', envConfig);
    log('‚úÖ Environment configured');
    const packageJson = {
        name: 'promptfoo-runner', version: '1.0.0',
        private: true, dependencies: { 'promptfoo': '^0.67.0' }
    };
    await wc.fs.writeFile('package.json', JSON.stringify(packageJson, null, 2));
    log('‚úÖ package.json created');
    log('üì¶ Installing promptfoo...');
    const installProcess = await wc.spawn('npm', ['install'], {
        env: { PROMPTFOO_DISABLE_TELEMETRY: '1', CI: 'true',PROMPTFOO_DISABLE_UPDATE:'1' }
    });
    const exitCode = await installProcess.exit;
    if (exitCode !== 0) { throw new Error(`npm install failed with exit code ${exitCode}`);}
    log('‚úÖ promptfoo installed successfully');
    webcontainerInstance = wc;
    isContainerInitialized = true;
    $('resetContainer').disabled = false;
    return wc;
}

function parseEvaluationResults(capturedOutput) {
    log('üîç Parsing evaluation results...');
    const results = {
        version: "promptfoo-webcontainer",
        timestamp: new Date().toISOString(),
        results: []
    };
    const lines = capturedOutput.split('\n');
    const apiCalls = [];
    let evalCounter = 1;
    for (const line of lines) {
        if (line.includes('Calling OpenAI API:')) {
            try {
                const apiCall = JSON.parse(line.split('Calling OpenAI API: ')[1]);
                const evalName = `Eval #${evalCounter}`;
                apiCalls.push({
                    evalId: evalName,
                    prompt: apiCall.messages?.[0]?.content || apiCall.prompt || '',
                    provider: 'openai',
                    model: apiCall.model,
                    request: apiCall
                });
                log(`üì§ ${evalName}: ${apiCall.messages?.[0]?.content?.substring(0, 50)}...`);
                evalCounter++;
            } catch (e) {
                log(`‚ö†Ô∏è Could not parse API call: ${e.message}`);
            }
        }
    }
    let currentResponse = null;
    let isCapturingResponse = false;
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        if (line.includes('OpenAI chat completions API response:')) {
            try {
                const responseJson = line.split('OpenAI chat completions API response: ')[1];
                currentResponse = JSON.parse(responseJson);
                isCapturingResponse = true;
                log(`üì• Found API response: ${currentResponse.id}`);
            } catch (e) {
                log(`‚ö†Ô∏è Could not parse API response: ${e.message}`);
                isCapturingResponse = false;
            }
        }
        if (line.includes('complete (') && line.includes('of') && currentResponse && isCapturingResponse) {
            const evalMatch = line.match(/Eval #(\d+) complete/);
            if (evalMatch) {
                const evalNumber = parseInt(evalMatch[1]);
                const evalId = `Eval #${evalNumber}`;
                const matchingCall = apiCalls.find(call => call.evalId === evalId);              
                if (matchingCall) {
                    const test = {
                        evalId: evalId,
                        ...matchingCall,
                        response: currentResponse,
                        output: currentResponse.choices?.[0]?.message?.content ||
                               currentResponse.choices?.[0]?.text || 'No output found',
                        usage: currentResponse.usage || {}
                    };                        
                    results.results.push(test);
                    log(`‚úÖ Matched ${evalId} with response ${currentResponse.id}`);
                    log(`   Prompt: ${test.prompt.substring(0, 60)}...`);
                    log(`   Response: ${test.output.substring(0, 60)}...`);
                } else {
                    log(`‚ö†Ô∏è Could not find API call for ${evalId}`);
                }
                currentResponse = null;
                isCapturingResponse = false;
            }
        }
    }
    results.results.sort((a, b) => {
        const aNum = parseInt(a.evalId.split('#')[1]);
        const bNum = parseInt(b.evalId.split('#')[1]);
        return aNum - bNum;
    });
    results.stats = {
        totalTests: results.results.length,
        totalTokens: results.results.reduce((sum, r) => sum + (r.usage?.total_tokens || 0), 0)
    };
    log(`üéØ Successfully parsed ${results.results.length} test results using completion markers`);
    return results;
}

async function runPromptfooEvaluation(wc, configContent) {
    log('üìù Writing config file...');
    await wc.fs.writeFile('promptfooconfig.yaml', configContent);
    log('‚ö° Running promptfoo eval...');
    const evalProcess = await wc.spawn('npx', ['promptfoo', 'eval', '--verbose', '--no-cache', '--no-write'], {
        env: {
            PROMPTFOO_DISABLE_TELEMETRY: '1',
            CI: 'true',
            PROMPTFOO_DISABLE_DATABASE: '1',
            PROMPTFOO_DISABLE_UPDATE: '1'
        }
    });
    const [capturedOutput, exitCode] = await Promise.all([
        readProcessOutput(evalProcess),
        evalProcess.exit
    ]);
    log(`üìä Evaluation finished with exit code: ${exitCode}`);
    const hasResults = capturedOutput.includes('API response:') || capturedOutput.includes('Eval #');
    const actualSuccess = hasResults;
    let exportResults = '';
    if (actualSuccess) {
        log('‚ö†Ô∏è Generating results from output...');
        const generatedResults = parseEvaluationResults(capturedOutput);
        const generatedJson = JSON.stringify(generatedResults, null, 2);
        enableDownloadButton(generatedJson, 'result-generated.json');
        exportResults = `\n\n=== GENERATED RESULTS ===\n${generatedJson}`;
    }
    const status = actualSuccess ? 'SUCCESS' : 'FAILED';
    return `PROMPTFOO EVALUATION RESULTS
====================================
Status: ${status}
Exit Code: ${exitCode}
Timestamp: ${new Date().toISOString()}
Console Output:
${capturedOutput || 'No output captured'}${exportResults}
====================================`;
}

async function runEvaluation() {
    if (!configContent) {    log('‚ùå No config content available'); return;  }
    try {
        $('runEval').disabled = true;
        $('runEval').textContent = 'Running...';
        $('output').textContent = 'Initializing...';
        if (!isContainerInitialized) {
            webcontainerInstance = await initWebContainer();
        } else {
            log('üîÑ Using existing WebContainer instance');
        }
        const result = await runPromptfooEvaluation(webcontainerInstance, configContent);
        $('output').textContent = result;
        log('üéâ Evaluation completed!');
    } catch (error) {
        log(`‚ùå Error: ${error.message}`);
        $('output').textContent = `Error: ${error.message}\n\nCheck logs for details.`;
        console.error('Full error:', error);
    } finally {
        $('runEval').disabled = false;
        $('runEval').textContent = 'Run Evaluation';
    }
}

function clearOutput() {
    $('logs').innerHTML = '';
    $('output').textContent = '';
    $('downloadResults').disabled = true;
    log('üßπ Output cleared');
}

async function resetContainer() {
    try {
        $('resetContainer').disabled = true;
        $('resetContainer').textContent = 'Resetting...';
        log('üîÑ Resetting WebContainer...');
        webcontainerInstance = null;
        isContainerInitialized = false;
        log('‚úÖ Container reset');
    } catch (error) {
        log(`‚ùå Reset error: ${error.message}`);
    } finally {
        $('resetContainer').textContent = 'Reset Container';
        $('resetContainer').disabled = true;
    }
}